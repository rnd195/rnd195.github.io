<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>rnd195</title>
<link>https://rnd195.github.io/blog.html</link>
<atom:link href="https://rnd195.github.io/blog.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.8.25</generator>
<lastBuildDate>Sat, 02 Aug 2025 22:00:00 GMT</lastBuildDate>
<item>
  <title>How to Build a Local Python Package with uv</title>
  <dc:creator>Martin Řanda</dc:creator>
  <link>https://rnd195.github.io/posts/build-package-uv/</link>
  <description><![CDATA[ 





<p>A walkthrough of how to build your custom Python package using <code>uv</code> without publishing it.</p>
<p><img src="https://rnd195.github.io/posts/build-package-uv/thumbnail.jpg" class="img-fluid" alt="Taped up box with uv written on the tape"></p>
<p>Blink and you’ll miss it. <a href="https://docs.astral.sh/uv/">Astral’s <code>uv</code></a> is a performant package &amp; project manager that’s out to replace all the competing tools.</p>
<p>In this blog post, I’ll walk you through a minimal example of how to build your own Python package <strong>without uploading it to the internet</strong>. While it’s great to get feedback from others when sharing your code, there may be simple reasons why that’s not always possible. For instance, if you’re building an internal package at work or testing something out, it’s usually not for sharing.</p>
<section id="get-started" class="level2">
<h2 class="anchored" data-anchor-id="get-started">Get started</h2>
<p>First, let’s start by installing <code>uv</code> on your machine. Assuming you have Python version 3.8 or later installed, an easy way to install <code>uv</code> is to use <code>pip</code>. First, create a folder for your project (e.g., <code>my-internal-pkg</code>), open up a terminal inside, and create a virtual environment:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> venv .venv</span></code></pre></div>
<p>Activate the environment and install <code>uv</code> using <code>pip</code>. I’m using PowerShell, so I run the following:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">.venv\Scripts\activate</span></span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install uv</span></code></pre></div>
<p>Once <code>uv</code> is installed (v0.8.4 used), initialize your project by running:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> init</span></code></pre></div>
<p>Now, the directory of your project should look like this:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">my-internal-pkg/</span></span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> .venv/</span>
<span id="cb4-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> .gitignore</span>
<span id="cb4-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> .python-version</span>
<span id="cb4-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> main.py</span>
<span id="cb4-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> pyproject.toml</span>
<span id="cb4-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> README.md</span></code></pre></div>
<p>As we can see, <code>uv init</code> created 5 files and initialized a <code>git</code> repository in the project folder. The important file to focus on is <code>pyproject.toml</code>. This file configures your future package based on what you specify inside. Let’s take a peek at the default structure of this file:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode toml"><code class="sourceCode toml"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[project]</span></span>
<span id="cb5-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">name</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my-internal-pkg"</span></span>
<span id="cb5-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">version</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.1.0"</span></span>
<span id="cb5-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">description</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Add your description here"</span></span>
<span id="cb5-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">readme</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"README.md"</span></span>
<span id="cb5-6"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">requires-python</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&gt;=3.12"</span></span>
<span id="cb5-7"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">dependencies</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span></span></code></pre></div>
<p>Most of the settings in your <code>pyproject.toml</code> are generated and managed by <code>uv</code>. Of course, all settings in this text file can be modified manually. I would, however, advise against making manual changes except for options like <code>description</code> or when adding whole sections (we’ll touch on that later). Let’s leave these settings unchanged for now.</p>
</section>
<section id="package-contents" class="level2">
<h2 class="anchored" data-anchor-id="package-contents">Package contents</h2>
<p>As a minimal example, let me create a simple Python script that calculates rolling minimum and maximum values for a given column in a <code>polars</code> dataframe. If you’re unfamiliar with <code>polars</code>, consider reading <a href="https://rnd195.github.io/posts/my-pd-pl-guide/">my guide</a> on getting started with <code>polars</code> as a <code>pandas</code> user.</p>
<p>First, let me install <code>polars</code> and set it as a dependency for my package:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> add polars</span></code></pre></div>
<p>This command installs the package in the virtual environment created earlier and modifies <code>pyproject.toml</code> by adding <code>polars</code> as a dependency. If we take a look at the <code>pyproject.toml</code> file now, the <code>dependencies</code> setting should look something like this</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode toml"><code class="sourceCode toml"><span id="cb7-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">dependencies</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb7-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"polars&gt;=1.31.0"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
<p>Next, let me delete the <code>main.py</code> file since it’s not needed. I’ll then create a folder inside the root directory of my project and name it <code>my_internal_pkg</code>. I’ll also place an empty <code>__init__.py</code> file inside the newly created folder.</p>
<p>My goal is to write a function that calculates rolling min and max values—I’m going to place this function in <code>df_helpers.py</code>. Here’s the updated file tree:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">my-internal-pkg/</span></span>
<span id="cb8-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> .venv/</span>
<span id="cb8-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> my_internal_pkg/</span>
<span id="cb8-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   ├── __init__.py</span>
<span id="cb8-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   └── df_helpers.py</span>
<span id="cb8-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> .gitignore</span>
<span id="cb8-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> .python-version</span>
<span id="cb8-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> pyproject.toml</span>
<span id="cb8-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> README.md</span></code></pre></div>
<p>Now onto the contents of <code>df_helpers.py</code>. Keeping it really simple, below is the rolling min max function I placed in this Python script:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> polars <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pl</span>
<span id="cb9-2"></span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> rolling_min_max(df: pl.DataFrame, col: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, window: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> pl.DataFrame:</span>
<span id="cb9-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Get rolling min and max values of a specific column"""</span></span>
<span id="cb9-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> df.with_columns(</span>
<span id="cb9-7">        pl.col(col).rolling_min(window_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>window).alias(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>col<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_roll_min"</span>),</span>
<span id="cb9-8">        pl.col(col).rolling_max(window_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>window).alias(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>col<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_roll_max"</span>)</span>
<span id="cb9-9">    )</span></code></pre></div>
<p>Now that we have something to be packaged, we’re almost set. There are some final touches we need to make to the <code>pyproject.toml</code> file.</p>
</section>
<section id="finalizing-pyprojects.toml" class="level2">
<h2 class="anchored" data-anchor-id="finalizing-pyprojects.toml">Finalizing <code>pyprojects.toml</code></h2>
<p>Since this tutorial is aimed at building a package locally, consider adding <code>classifiers = ["Private :: Do Not Upload"]</code> into the <code>[project]</code> section in the config file:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode toml"><code class="sourceCode toml"><span id="cb10-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[project]</span></span>
<span id="cb10-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">name</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my-internal-pkg"</span></span>
<span id="cb10-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">version</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.1.0"</span></span>
<span id="cb10-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">description</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Add your description here"</span></span>
<span id="cb10-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">readme</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"README.md"</span></span>
<span id="cb10-6"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">requires-python</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&gt;=3.12"</span></span>
<span id="cb10-7"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">dependencies</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb10-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"polars&gt;=1.31.0"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb10-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb10-10"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">classifiers</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Private :: Do Not Upload"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
<p>This labels the package as “private” and adds another layer of defense against accidentally publishing your package to PyPI (see <a href="https://docs.astral.sh/uv/guides/package/">docs</a>).</p>
<p>Next, let’s set up the <code>[build-system]</code> section. <code>uv</code>’s own backend has recently been <a href="https://github.com/astral-sh/uv/issues/3957#issuecomment-3033045054">marked as stable</a>, and it seems reasonable to believe that it’s going to become the default in the future. In the meantime, let me use <a href="https://pypi.org/project/hatchling/"><code>hatchling</code></a> from the Python Packaging Authority, which <code>uv</code> authors <a href="https://github.com/astral-sh/uv/issues/7132#issuecomment-2334543408">considered reasonable</a> as a build backed. As a sidenote, I was curious which prominent projects also use this build system: <a href="https://github.com/jupyterlab/jupyterlab/blob/1d74b00fe2007d81736b18d263e822b43f5ad632/pyproject.toml#L6">JupyterLab</a>, for example.</p>
<p>To use <code>hatchling</code> as the build backend, we need to place the following section into the <code>.toml</code> file</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode toml"><code class="sourceCode toml"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[build-system]</span></span>
<span id="cb11-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">requires</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hatchling &gt;= 1.26"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb11-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">build-backend</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hatchling.build"</span></span></code></pre></div>
<p>Additionally, we have to specify the folder containing the core of our package (<code>my_internal_pkg/</code> in our case) because the build system expects to find the <code>src/</code> folder by default. Many prominent projects like <a href="https://github.com/django/django"><code>django</code></a> or <a href="https://github.com/pandas-dev/pandas"><code>pandas</code></a> don’t follow these defaults either and instead place their scripts into <code>django</code> and <code>pandas</code> subfolders, respectively.</p>
<p>Consequently, we also need to add 1 more section to <code>pyproject.toml</code>:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode toml"><code class="sourceCode toml"><span id="cb12-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[tool.hatch.build.targets.wheel]</span></span>
<span id="cb12-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">packages</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my_internal_pkg/"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
<p>For additional configuration like excluding files/folders in the source distribution, consider taking a look at <a href="https://hatch.pypa.io/dev/build/#configuration">hatch docs</a>.</p>
<p>We’re almost at the finish line. For completeness, the final <code>pyproject.toml</code> file looks like this:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode toml"><code class="sourceCode toml"><span id="cb13-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[project]</span></span>
<span id="cb13-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">name</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my-internal-pkg"</span></span>
<span id="cb13-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">version</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.1.0"</span></span>
<span id="cb13-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">description</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Add your description here"</span></span>
<span id="cb13-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">readme</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"README.md"</span></span>
<span id="cb13-6"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">requires-python</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&gt;=3.12"</span></span>
<span id="cb13-7"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">dependencies</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb13-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"polars&gt;=1.31.0"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb13-10"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">classifiers</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Private :: Do Not Upload"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb13-11"></span>
<span id="cb13-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[build-system]</span></span>
<span id="cb13-13"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">requires</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hatchling &gt;= 1.26"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb13-14"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">build-backend</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hatchling.build"</span></span>
<span id="cb13-15"></span>
<span id="cb13-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[tool.hatch.build.targets.wheel]</span></span>
<span id="cb13-17"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">packages</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my_internal_pkg/"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
</section>
<section id="build" class="level2">
<h2 class="anchored" data-anchor-id="build">Build</h2>
<p>With <code>pyproject.toml</code> set up, we should now be able to build the package. What’s going to happen now is that the build command will create a folder named <code>dist/</code>. Inside this folder, we’re going to see our package in a <code>.tar.gz</code> (source distribution) and <code>.whl</code> (wheel) format. While the difference between these is beyond the scope of this post, if you’re going to be distributing your package locally—to other colleagues or your other systems—consider using the <code>.whl</code> file because it simplifies the process of installing the package. Note that both of these are ultimately archives, so you can take a look inside each to see the differences. To learn more about this topic, I would recommend reading <a href="https://realpython.com/python-wheels/">this excellent article on Real Python</a>.</p>
<p><strong>Enough stalling, let’s build the package.</strong> Open up a terminal in the root directory of the project, and simply type:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb14-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> build</span></code></pre></div>
<p>If successful, the <code>dist/</code> folder should pop up and the two distributions should be inside:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb15-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">dist/</span></span>
<span id="cb15-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> .gitignore</span>
<span id="cb15-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> my_internal_pkg-0.1.0.tar.gz</span>
<span id="cb15-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> my_internal_pkg-0.1.0-py3-none-any.whl</span></code></pre></div>
</section>
<section id="install" class="level2">
<h2 class="anchored" data-anchor-id="install">Install</h2>
<p>To install the package, grab the <code>.whl</code> file and place it wherever you need it installed. You can then install it using <code>pip</code> (or <code>uv pip</code>) by running:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb16-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"path/to/my_internal_pkg-0.1.0-py3-none-any.whl"</span></span></code></pre></div>
</section>
<section id="thats-it" class="level2">
<h2 class="anchored" data-anchor-id="thats-it">That’s it?</h2>
<p><strong>Yes, that’s it!</strong> With just a few commands and a handful of lines of configuration, we’ve built a Python package from scratch using <code>uv</code>.</p>
<p>You should now be able to import your package in the environment you installed it to using</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb17-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> my_internal_pkg</span></code></pre></div>
<p>This was just a minimal example of how to get started building packages. Consider browsing through repositories of popular Python packages to see how they do it. Additionally, for a tutorial on how to publish your package, take a look at <a href="https://docs.astral.sh/uv/guides/package/"><code>uv</code> docs</a>.</p>
<p>If you have any suggestions or corrections, feel free to let me know in the comments on GitHub!</p>
<p><br> <a href="https://github.com/rnd195/rnd195.github.io-comments/issues/4" class="btn btn-secondary bi-chat" title="Comment on GitHub" target="_blank">Comment on GitHub</a></p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div>Content of this blogpost is licensed under Creative Commons Attribution CC BY 4.0. Any content used from other sources is indicated and is  not covered by this license.
<a rel="license" href="https://creativecommons.org/licenses/by/4.0/">(View License)</a></div></div></section></div> ]]></description>
  <category>python</category>
  <guid>https://rnd195.github.io/posts/build-package-uv/</guid>
  <pubDate>Sat, 02 Aug 2025 22:00:00 GMT</pubDate>
  <media:content url="https://rnd195.github.io/posts/build-package-uv/thumbnail.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>A Beginner’s Guide to pandas &amp; polars</title>
  <dc:creator>Martin Řanda</dc:creator>
  <link>https://rnd195.github.io/posts/my-pd-pl-guide/</link>
  <description><![CDATA[ 





<p>This guide will help you start learning <code>polars</code> by showcasing analogous code snippets from <code>pandas</code>.</p>
<p><img src="https://rnd195.github.io/posts/my-pd-pl-guide/thumbnail.png" class="img-fluid" alt="Picture of text that says import pandas as pd and import polars as pl"></p>
<p>In recent years, <code>polars</code><sup>1</sup> is becoming increasingly popular in the data science community (more than 33k stars on GitHub as of May 2025<sup>2</sup>). According to the author of <code>polars</code>, Ritchie Vink, the package’s API is “consistent and strict,” and its focus is on maximizing single machine performance<sup>3</sup> which perhaps explains some of the library’s appeal. From my experience, <code>polars</code> has been a major time saver, especially in data-intensive computations. However, I think that it is perfectly reasonable to prefer <code>pandas</code> for some tasks (like quick data visualization), and I am glad that this competition is pushing the field forward.</p>
<p>In this post, I wrote down some of the most common operations in <code>pandas</code> and their equivalents in <code>polars</code> to help you get acquainted with the package (and to help myself remember). Please, note that this guide / cheat sheet may not be exhaustive and in some cases, there might be additional ways to achieve the same goal. Feel free to let me know <a href="https://github.com/rnd195/rnd195.github.io-comments/issues/3">in the comments</a>.</p>
<p>This is a runnable Quarto document, so first, let’s load the packages.</p>
<div id="814a78ba" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> polars <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pl</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datetime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> date, timedelta, datetime</span></code></pre></div>
</div>
<section id="load-data" class="level2">
<h2 class="anchored" data-anchor-id="load-data">Load data</h2>
<p>We’ll be working with my Wizard Shop Dataset<sup>4</sup> which was specifically crafted for introductory data analysis. It consists of three tables:</p>
<ul>
<li><p><code>wizard_shop_inventory.csv</code>: A list of products with prices, item quality, and other attributes.</p></li>
<li><p><code>magical_items_info.csv</code>: A small table with typical price, quality, and where the item is typically found.</p></li>
<li><p><code>items_prices_timeline.csv</code>: Average daily prices of each product category.</p></li>
</ul>
<p>Let’s load the data.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true" href="">1️⃣ pandas</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false" href="">2️⃣ polars</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<p>As we can see, the syntax is the same in both packages except for parsing dates.</p>
<div id="0228f36f" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1">data_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://raw.githubusercontent.com/rnd195/wizard-shop-dataset/refs/heads/main/data/"</span></span>
<span id="cb2-2"></span>
<span id="cb2-3">df_pd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(data_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wizard_shop_inventory.csv"</span>)</span>
<span id="cb2-4">info_pd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(data_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"magical_items_info.csv"</span>)</span>
<span id="cb2-5">prices_pd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(</span>
<span id="cb2-6">    data_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"items_prices_timeline.csv"</span>, </span>
<span id="cb2-7">    parse_dates<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span>]</span>
<span id="cb2-8">)</span></code></pre></div>
</div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<p>As we can see, the syntax is the same in both packages except for parsing dates.</p>
<div id="30ca7678" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1">data_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://raw.githubusercontent.com/rnd195/wizard-shop-dataset/refs/heads/main/data/"</span></span>
<span id="cb3-2"></span>
<span id="cb3-3">df_pl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pl.read_csv(data_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wizard_shop_inventory.csv"</span>)</span>
<span id="cb3-4">info_pl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pl.read_csv(data_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"magical_items_info.csv"</span>)</span>
<span id="cb3-5">prices_pl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pl.read_csv(</span>
<span id="cb3-6">    data_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"items_prices_timeline.csv"</span>, </span>
<span id="cb3-7">    try_parse_dates<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb3-8">)</span></code></pre></div>
</div>
</div>
</div>
</div>
</section>
<section id="take-a-peek" class="level2">
<h2 class="anchored" data-anchor-id="take-a-peek">Take a peek</h2>
<p>Sometimes, we want to take a quick look at the data. The methods <code>.sample()</code>, <code>.head()</code>, and <code>.tail()</code> all work in both packages.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true" href="">1️⃣ pandas</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false" href="">2️⃣ polars</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<p>The <code>df</code> DataFrame contains all the products the wizard shopkeeper sells—items like potions, amulets, or cloaks.</p>
<div id="aa5c03cb" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1">df_pd.sample(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">id</th>
<th data-quarto-table-cell-role="th">item</th>
<th data-quarto-table-cell-role="th">price</th>
<th data-quarto-table-cell-role="th">magical_power</th>
<th data-quarto-table-cell-role="th">quality</th>
<th data-quarto-table-cell-role="th">in_stock</th>
<th data-quarto-table-cell-role="th">found_in</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<th data-quarto-table-cell-role="th">426</th>
<td>427</td>
<td>cloak</td>
<td>630.5</td>
<td>298.183</td>
<td>0</td>
<td>True</td>
<td>dungeon</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">299</th>
<td>300</td>
<td>staff</td>
<td>2124.0</td>
<td>772.533</td>
<td>7</td>
<td>True</td>
<td>NaN</td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">42</th>
<td>43</td>
<td>amulet</td>
<td>1076.0</td>
<td>465.399</td>
<td>9</td>
<td>True</td>
<td>dungeon</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>The <code>info</code> table contains information about the typical attributes of these items.</p>
<div id="3ef6482f" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb5-1">info_pd.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">item</th>
<th data-quarto-table-cell-role="th">typical_price</th>
<th data-quarto-table-cell-role="th">typical_quality</th>
<th data-quarto-table-cell-role="th">typically_found_in</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<th data-quarto-table-cell-role="th">0</th>
<td>amulet</td>
<td>1000</td>
<td>9</td>
<td>dungeon</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">1</th>
<td>potion</td>
<td>50</td>
<td>7</td>
<td>village</td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">2</th>
<td>cloak</td>
<td>500</td>
<td>4</td>
<td>city</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>The <code>prices</code> DataFrame contains the daily average price of each item in the fantasy world’s economy in the magical year of 2025.</p>
<div id="a75ec98a" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb6-1">prices_pd.tail(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">date</th>
<th data-quarto-table-cell-role="th">amulet</th>
<th data-quarto-table-cell-role="th">potion</th>
<th data-quarto-table-cell-role="th">cloak</th>
<th data-quarto-table-cell-role="th">staff</th>
<th data-quarto-table-cell-role="th">scroll</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<th data-quarto-table-cell-role="th">362</th>
<td>2025-12-29</td>
<td>742.21</td>
<td>44.70</td>
<td>648.72</td>
<td>971.90</td>
<td>731.69</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">363</th>
<td>2025-12-30</td>
<td>802.06</td>
<td>48.99</td>
<td>446.10</td>
<td>1711.04</td>
<td>728.60</td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">364</th>
<td>2025-12-31</td>
<td>957.94</td>
<td>64.08</td>
<td>503.88</td>
<td>2899.72</td>
<td>829.59</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<p>The <code>df</code> DataFrame contains all the products the wizard shopkeeper sells—items like potions, amulets, or cloaks.</p>
<div id="ec1b1fae" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb7-1">df_pl.sample(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (3, 7)</small>
<table class="dataframe caption-top table table-sm table-striped small" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">id</th>
<th data-quarto-table-cell-role="th">item</th>
<th data-quarto-table-cell-role="th">price</th>
<th data-quarto-table-cell-role="th">magical_power</th>
<th data-quarto-table-cell-role="th">quality</th>
<th data-quarto-table-cell-role="th">in_stock</th>
<th data-quarto-table-cell-role="th">found_in</th>
</tr>
<tr class="even">
<td>i64</td>
<td>str</td>
<td>f64</td>
<td>f64</td>
<td>i64</td>
<td>bool</td>
<td>str</td>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>376</td>
<td>"scroll"</td>
<td>1039.5</td>
<td>424.913</td>
<td>4</td>
<td>true</td>
<td>"dungeon"</td>
</tr>
<tr class="even">
<td>90</td>
<td>"potion"</td>
<td>64.35</td>
<td>93.7195</td>
<td>3</td>
<td>true</td>
<td>"dungeon"</td>
</tr>
<tr class="odd">
<td>125</td>
<td>"potion"</td>
<td>54.05</td>
<td>108.9175</td>
<td>8</td>
<td>true</td>
<td>"dungeon"</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>The <code>info</code> table contains information about the typical attributes of these items.</p>
<div id="71c4bfa7" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb8-1">info_pl.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (3, 4)</small>
<table class="dataframe caption-top table table-sm table-striped small" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">item</th>
<th data-quarto-table-cell-role="th">typical_price</th>
<th data-quarto-table-cell-role="th">typical_quality</th>
<th data-quarto-table-cell-role="th">typically_found_in</th>
</tr>
<tr class="even">
<td>str</td>
<td>i64</td>
<td>i64</td>
<td>str</td>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>"amulet"</td>
<td>1000</td>
<td>9</td>
<td>"dungeon"</td>
</tr>
<tr class="even">
<td>"potion"</td>
<td>50</td>
<td>7</td>
<td>"village"</td>
</tr>
<tr class="odd">
<td>"cloak"</td>
<td>500</td>
<td>4</td>
<td>"city"</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>The <code>prices</code> DataFrame contains the daily average price of each item in the fantasy world’s economy in the magical year of 2025.</p>
<div id="91f809ba" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb9-1">prices_pl.tail(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (3, 6)</small>
<table class="dataframe caption-top table table-sm table-striped small" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">date</th>
<th data-quarto-table-cell-role="th">amulet</th>
<th data-quarto-table-cell-role="th">potion</th>
<th data-quarto-table-cell-role="th">cloak</th>
<th data-quarto-table-cell-role="th">staff</th>
<th data-quarto-table-cell-role="th">scroll</th>
</tr>
<tr class="even">
<td>date</td>
<td>f64</td>
<td>f64</td>
<td>f64</td>
<td>f64</td>
<td>f64</td>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>2025-12-29</td>
<td>742.21</td>
<td>44.7</td>
<td>648.72</td>
<td>971.9</td>
<td>731.69</td>
</tr>
<tr class="even">
<td>2025-12-30</td>
<td>802.06</td>
<td>48.99</td>
<td>446.1</td>
<td>1711.04</td>
<td>728.6</td>
</tr>
<tr class="odd">
<td>2025-12-31</td>
<td>957.94</td>
<td>64.08</td>
<td>503.88</td>
<td>2899.72</td>
<td>829.59</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="subset-a-dataframe" class="level2">
<h2 class="anchored" data-anchor-id="subset-a-dataframe">Subset a DataFrame</h2>
<section id="columns" class="level3">
<h3 class="anchored" data-anchor-id="columns">Columns</h3>
<section id="select-a-column-by-name" class="level4">
<h4 class="anchored" data-anchor-id="select-a-column-by-name">Select a column by name</h4>
<p>There are several ways to select a single column in both <code>pandas</code> and <code>polars</code>. Note that some of the calls return a Series while others return a DataFrame.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-3-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-1" aria-controls="tabset-3-1" aria-selected="true" href="">1️⃣ pandas</a></li><li class="nav-item"><a class="nav-link" id="tabset-3-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-2" aria-controls="tabset-3-2" aria-selected="false" href="">2️⃣ polars</a></li></ul>
<div class="tab-content">
<div id="tabset-3-1" class="tab-pane active" aria-labelledby="tabset-3-1-tab">
<div id="bf83cb8b" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb10-1">df_pd[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"price"</span>]        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -&gt; returns Series of shape (500,)</span></span>
<span id="cb10-2">df_pd[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"price"</span>]]      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -&gt; returns DataFrame of shape (500, 1)</span></span>
<span id="cb10-3">df_pd.price           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -&gt; returns Series of shape (500,)</span></span>
<span id="cb10-4">df_pd.loc[:, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"price"</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -&gt; returns Series of shape (500,)</span></span></code></pre></div>
</div>
</div>
<div id="tabset-3-2" class="tab-pane" aria-labelledby="tabset-3-2-tab">
<div id="408b487e" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb11-1">df_pl[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"price"</span>]                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -&gt; returns Series of shape (500,)</span></span>
<span id="cb11-2">df_pl[:, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"price"</span>]             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -&gt; returns Series of shape (500,)</span></span>
<span id="cb11-3">df_pl.select(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"price"</span>)         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -&gt; returns DataFrame of shape (500, 1)</span></span>
<span id="cb11-4">df_pl.select(pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"price"</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -&gt; returns DataFrame of shape (500, 1)</span></span></code></pre></div>
</div>
</div>
</div>
</div>
</section>
<section id="select-multiple-columns-by-name" class="level4">
<h4 class="anchored" data-anchor-id="select-multiple-columns-by-name">Select multiple columns by name</h4>
<p>Below are several alternatives for selecting columns.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-4-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-1" aria-controls="tabset-4-1" aria-selected="true" href="">1️⃣ pandas</a></li><li class="nav-item"><a class="nav-link" id="tabset-4-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-2" aria-controls="tabset-4-2" aria-selected="false" href="">2️⃣ polars</a></li></ul>
<div class="tab-content">
<div id="tabset-4-1" class="tab-pane active" aria-labelledby="tabset-4-1-tab">
<div id="9751ea55" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb12-1">df_pd[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"price"</span>]]</span>
<span id="cb12-2">df_pd.loc[:, [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"price"</span>]]</span></code></pre></div>
</div>
</div>
<div id="tabset-4-2" class="tab-pane" aria-labelledby="tabset-4-2-tab">
<div id="97c9b488" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb13-1">df_pl[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"price"</span>]]</span>
<span id="cb13-2">df_pl[:, [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"price"</span>]]</span>
<span id="cb13-3">df_pl[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"price"</span>]</span>
<span id="cb13-4">df_pl.select([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"price"</span>])</span>
<span id="cb13-5">df_pl.select(pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"price"</span>))</span></code></pre></div>
</div>
</div>
</div>
</div>
</section>
<section id="slice-columns-by-range" class="level4">
<h4 class="anchored" data-anchor-id="slice-columns-by-range">Slice columns by range</h4>
<p>Instead of selecting columns by name, we can write their positions in the DataFrame.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-5-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-5-1" aria-controls="tabset-5-1" aria-selected="true" href="">1️⃣ pandas</a></li><li class="nav-item"><a class="nav-link" id="tabset-5-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-5-2" aria-controls="tabset-5-2" aria-selected="false" href="">2️⃣ polars</a></li></ul>
<div class="tab-content">
<div id="tabset-5-1" class="tab-pane active" aria-labelledby="tabset-5-1-tab">
<div id="00342e8a" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb14-1">df_pd.iloc[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>]</span></code></pre></div>
</div>
</div>
<div id="tabset-5-2" class="tab-pane" aria-labelledby="tabset-5-2-tab">
<div id="4ecc36cb" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb15-1">df_pl[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>]</span></code></pre></div>
</div>
</div>
</div>
</div>
</section>
<section id="slice-columns-by-name" class="level4">
<h4 class="anchored" data-anchor-id="slice-columns-by-name">Slice columns by name</h4>
<p>It’s also possible to select a range of columns by name. The resulting DataFrame will contain the first and the last selected column as well as any columns in-between.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-6-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-6-1" aria-controls="tabset-6-1" aria-selected="true" href="">1️⃣ pandas</a></li><li class="nav-item"><a class="nav-link" id="tabset-6-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-6-2" aria-controls="tabset-6-2" aria-selected="false" href="">2️⃣ polars</a></li></ul>
<div class="tab-content">
<div id="tabset-6-1" class="tab-pane active" aria-labelledby="tabset-6-1-tab">
<div id="e6e33642" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb16-1">df_pd.loc[:, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"in_stock"</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"found_in"</span>]</span></code></pre></div>
</div>
</div>
<div id="tabset-6-2" class="tab-pane" aria-labelledby="tabset-6-2-tab">
<div id="07187de0" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb17-1">df_pl[:, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"in_stock"</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"found_in"</span>]</span></code></pre></div>
</div>
</div>
</div>
</div>
</section>
<section id="filter-columns-using-bools" class="level4">
<h4 class="anchored" data-anchor-id="filter-columns-using-bools">Filter columns using Bools</h4>
<p>We can pass a list of True/False values to select specific columns. The length of this list needs to be the same as the number of columns in the DataFrame. For instance, <code>df_pd</code>/<code>df_pl</code> contains 7 columns. Thus, one possible list of True/False values may look like this: <code>[True, False, True, False, True, True, True]</code>.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-7-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-7-1" aria-controls="tabset-7-1" aria-selected="true" href="">1️⃣ pandas</a></li><li class="nav-item"><a class="nav-link" id="tabset-7-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-7-2" aria-controls="tabset-7-2" aria-selected="false" href="">2️⃣ polars</a></li></ul>
<div class="tab-content">
<div id="tabset-7-1" class="tab-pane active" aria-labelledby="tabset-7-1-tab">
<div id="1bb9e477" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return all columns containing the substring "price"</span></span>
<span id="cb18-2">df_pd.loc[:, [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"price"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> col <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> col <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> df_pd.columns]]</span></code></pre></div>
</div>
</div>
<div id="tabset-7-2" class="tab-pane" aria-labelledby="tabset-7-2-tab">
<div id="0a786108" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return all columns containing the substring "price"</span></span>
<span id="cb19-2">df_pl[:, [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"price"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> col <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> col <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> df_pl.columns]]</span></code></pre></div>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="rows" class="level3">
<h3 class="anchored" data-anchor-id="rows">Rows</h3>
<section id="select-row-by-index-label" class="level4">
<h4 class="anchored" data-anchor-id="select-row-by-index-label">Select row by index label</h4>
<p>In case the index is, for example, <code>datetime</code> or <code>str</code>, it is possible to select rows by the index label. However, this is not applicable in <code>polars</code> since <a href="https://docs.pola.rs/user-guide/migration/pandas/"><code>polars</code> treats the index differently</a> than <code>pandas</code>.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-8-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-8-1" aria-controls="tabset-8-1" aria-selected="true" href="">1️⃣ pandas</a></li><li class="nav-item"><a class="nav-link" id="tabset-8-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-8-2" aria-controls="tabset-8-2" aria-selected="false" href="">2️⃣ polars</a></li></ul>
<div class="tab-content">
<div id="tabset-8-1" class="tab-pane active" aria-labelledby="tabset-8-1-tab">
<div id="0fe19db7" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb20-1">prices_pd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prices_pd.set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span>)</span>
<span id="cb20-2">prices_pd.loc[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2025-01-05"</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>amulet     996.24
potion      49.65
cloak      497.42
staff     2643.03
scroll    1096.03
Name: 2025-01-05 00:00:00, dtype: float64</code></pre>
</div>
</div>
</div>
<div id="tabset-8-2" class="tab-pane" aria-labelledby="tabset-8-2-tab">
<div id="66f85b35" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Not applicable in polars</span></span>
<span id="cb22-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Below is a call that outputs a similar result</span></span>
<span id="cb22-3">prices_pl.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> date(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2025</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (1, 6)</small>
<table class="dataframe caption-top table table-sm table-striped small" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">date</th>
<th data-quarto-table-cell-role="th">amulet</th>
<th data-quarto-table-cell-role="th">potion</th>
<th data-quarto-table-cell-role="th">cloak</th>
<th data-quarto-table-cell-role="th">staff</th>
<th data-quarto-table-cell-role="th">scroll</th>
</tr>
<tr class="even">
<td>date</td>
<td>f64</td>
<td>f64</td>
<td>f64</td>
<td>f64</td>
<td>f64</td>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>2025-01-05</td>
<td>996.24</td>
<td>49.65</td>
<td>497.42</td>
<td>2643.03</td>
<td>1096.03</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="select-a-single-row-by-integer-position" class="level4">
<h4 class="anchored" data-anchor-id="select-a-single-row-by-integer-position">Select a single row by integer position</h4>
<p>Both <code>pandas</code> and <code>polars</code> support selecting a single row using its integer position.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-9-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-9-1" aria-controls="tabset-9-1" aria-selected="true" href="">1️⃣ pandas</a></li><li class="nav-item"><a class="nav-link" id="tabset-9-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-9-2" aria-controls="tabset-9-2" aria-selected="false" href="">2️⃣ polars</a></li></ul>
<div class="tab-content">
<div id="tabset-9-1" class="tab-pane active" aria-labelledby="tabset-9-1-tab">
<div id="60e030fe" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb23-1">df_pd.iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -&gt; returns a Series</span></span>
<span id="cb23-2">df_pd[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -&gt; returns a DataFrame</span></span></code></pre></div>
</div>
</div>
<div id="tabset-9-2" class="tab-pane" aria-labelledby="tabset-9-2-tab">
<div id="3ffef09b" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb24-1">df_pl[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] </span>
<span id="cb24-2">df_pl[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span>
<span id="cb24-3">df_pl[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, :] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -&gt; all three of these return a DataFrame</span></span></code></pre></div>
</div>
</div>
</div>
</div>
</section>
<section id="slice-rows-by-integer-range" class="level4">
<h4 class="anchored" data-anchor-id="slice-rows-by-integer-range">Slice rows by integer range</h4>
<p>Likewise, both <code>pandas</code> and <code>polars</code> support selecting rows using a range of integers.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-10-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-10-1" aria-controls="tabset-10-1" aria-selected="true" href="">1️⃣ pandas</a></li><li class="nav-item"><a class="nav-link" id="tabset-10-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-10-2" aria-controls="tabset-10-2" aria-selected="false" href="">2️⃣ polars</a></li></ul>
<div class="tab-content">
<div id="tabset-10-1" class="tab-pane active" aria-labelledby="tabset-10-1-tab">
<div id="f6e94632" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb25-1">df_pd.iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span>
<span id="cb25-2">df_pd[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span></code></pre></div>
</div>
</div>
<div id="tabset-10-2" class="tab-pane" aria-labelledby="tabset-10-2-tab">
<div id="59323fc9" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb26-1">df_pl[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span>
<span id="cb26-2">df_pl[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, :]</span></code></pre></div>
</div>
</div>
</div>
</div>
</section>
<section id="filter-rows-using-bools" class="level4">
<h4 class="anchored" data-anchor-id="filter-rows-using-bools">Filter rows using Bools</h4>
<p>We can pass a Series (or a similar object) containing True/False values to subset the DataFrame.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-11-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-11-1" aria-controls="tabset-11-1" aria-selected="true" href="">1️⃣ pandas</a></li><li class="nav-item"><a class="nav-link" id="tabset-11-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-11-2" aria-controls="tabset-11-2" aria-selected="false" href="">2️⃣ polars</a></li></ul>
<div class="tab-content">
<div id="tabset-11-1" class="tab-pane active" aria-labelledby="tabset-11-1-tab">
<div id="c020c2da" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get products with price over 1000</span></span>
<span id="cb27-2">df_pd[df_pd[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"price"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>]</span></code></pre></div>
</div>
</div>
<div id="tabset-11-2" class="tab-pane" aria-labelledby="tabset-11-2-tab">
<div id="650ba9bc" class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get products with price over 1000</span></span>
<span id="cb28-2">df_pl.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(df_pl[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"price"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb28-3">df_pl.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"price"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span></code></pre></div>
</div>
</div>
</div>
</div>
</section>
</section>
</section>
<section id="creating-new-columns" class="level2">
<h2 class="anchored" data-anchor-id="creating-new-columns">Creating new columns</h2>
<section id="new-empty-column" class="level4">
<h4 class="anchored" data-anchor-id="new-empty-column">New empty column</h4>
<p>Sometimes, it might make sense to create a new column in a DataFrame and fill it with NA values. I think of it as “reserving” the column for values that will be put into the column later. There are several ways to achieve this in both packages.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-12-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-12-1" aria-controls="tabset-12-1" aria-selected="true" href="">1️⃣ pandas</a></li><li class="nav-item"><a class="nav-link" id="tabset-12-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-12-2" aria-controls="tabset-12-2" aria-selected="false" href="">2️⃣ polars</a></li></ul>
<div class="tab-content">
<div id="tabset-12-1" class="tab-pane active" aria-labelledby="tabset-12-1-tab">
<p>Missing values in <code>pandas</code>: depends on the datatype. Consider using <code>None</code> or <code>np.nan</code>. Note that <code>pd.NA</code> is <a href="https://pandas.pydata.org/docs/user_guide/missing_data.html#na-semantics">still experimental</a>.</p>
<div id="88036404" class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Is any item in the wizard's shop cursed? We don't know =&gt; NA</span></span>
<span id="cb29-2">df_pd[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is_cursed"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.nan</span>
<span id="cb29-3">df_pd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_pd.assign(is_cursed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.nan)</span>
<span id="cb29-4">df_pd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_pd.assign(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is_cursed"</span>: np.nan})</span>
<span id="cb29-5">df_pd.loc[:, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is_cursed"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.nan</span></code></pre></div>
</div>
</div>
<div id="tabset-12-2" class="tab-pane" aria-labelledby="tabset-12-2-tab">
<p>Missing values in <code>polars</code>: <code>None</code>, represented as <code>null</code>.</p>
<div id="8ee32f5e" class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Is any item in the wizard's shop cursed? We don't know =&gt; NA</span></span>
<span id="cb30-2">df_pl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_pl.with_columns(is_cursed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb30-3">df_pl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_pl.with_columns(is_cursed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pl.lit(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>))</span>
<span id="cb30-4">df_pl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_pl.with_columns(pl.lit(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>).alias(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is_cursed"</span>))</span></code></pre></div>
</div>
</div>
</div>
</div>
</section>
<section id="transform-an-existing-column" class="level4">
<h4 class="anchored" data-anchor-id="transform-an-existing-column">Transform an existing column</h4>
<p>Apply any function to an existing column in a DataFrame and write it as a new column.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-13-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-13-1" aria-controls="tabset-13-1" aria-selected="true" href="">1️⃣ pandas</a></li><li class="nav-item"><a class="nav-link" id="tabset-13-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-13-2" aria-controls="tabset-13-2" aria-selected="false" href="">2️⃣ polars</a></li></ul>
<div class="tab-content">
<div id="tabset-13-1" class="tab-pane active" aria-labelledby="tabset-13-1-tab">
<p>Some options for transforming columns in <code>pandas</code>: <code>.transform()</code>, <code>.apply()</code>, calling a <code>numpy</code> function on the Series…</p>
<div id="fccdac10" class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Take the logarithm of the price column</span></span>
<span id="cb31-2">df_pd[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log_price"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_pd[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"price"</span>].transform(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log"</span>)</span>
<span id="cb31-3">df_pd[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log_price"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_pd[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"price"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(np.log)</span>
<span id="cb31-4">df_pd[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log_price"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.log(df_pd[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"price"</span>])</span></code></pre></div>
</div>
</div>
<div id="tabset-13-2" class="tab-pane" aria-labelledby="tabset-13-2-tab">
<p>Transforming columns in <code>polars</code>: use the <code>.with_columns(...)</code> method.</p>
<div id="b7746f26" class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Take the logarithm of the price column</span></span>
<span id="cb32-2">df_pl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_pl.with_columns(pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"price"</span>).log().alias(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log_price"</span>))</span>
<span id="cb32-3">df_pl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_pl.with_columns(log_price<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"price"</span>).log())</span>
<span id="cb32-4">df_pl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_pl.with_columns(df_pl[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"price"</span>].log().alias(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log_price"</span>))</span></code></pre></div>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="boolean-filters" class="level2">
<h2 class="anchored" data-anchor-id="boolean-filters">Boolean filters</h2>
<p>Use set operations to filter the DataFrame based on predefined conditions.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-14-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-14-1" aria-controls="tabset-14-1" aria-selected="true" href="">1️⃣ pandas</a></li><li class="nav-item"><a class="nav-link" id="tabset-14-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-14-2" aria-controls="tabset-14-2" aria-selected="false" href="">2️⃣ polars</a></li></ul>
<div class="tab-content">
<div id="tabset-14-1" class="tab-pane active" aria-labelledby="tabset-14-1-tab">
<div id="b7e2e631" class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># AND operator</span></span>
<span id="cb33-2">df_pd[(df_pd[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"price"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (df_pd[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"price"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>)]</span>
<span id="cb33-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># OR operator</span></span>
<span id="cb33-4">df_pd[(df_pd[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"price"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> (df_pd[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"scroll"</span>)]</span>
<span id="cb33-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Inverse</span></span>
<span id="cb33-6">df_pd[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>df_pd[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"in_stock"</span>]]</span>
<span id="cb33-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># True if a value matches any of the specified values, else False</span></span>
<span id="cb33-8">df_pd[df_pd[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item"</span>].isin([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"staff"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"potion"</span>])]</span>
<span id="cb33-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Is not NA... there's also .dropna() </span></span>
<span id="cb33-10">df_pd[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>df_pd[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"found_in"</span>].isna()]</span></code></pre></div>
</div>
</div>
<div id="tabset-14-2" class="tab-pane" aria-labelledby="tabset-14-2-tab">
<div id="a79ef4f9" class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb34-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># AND operator</span></span>
<span id="cb34-2">df_pl.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>((pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"price"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"price"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>))</span>
<span id="cb34-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># OR operator</span></span>
<span id="cb34-4">df_pl.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>((pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"price"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> (pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"scroll"</span>))</span>
<span id="cb34-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Inverse</span></span>
<span id="cb34-6">df_pl.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"in_stock"</span>))</span>
<span id="cb34-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># True if a value matches any of the specified values, else False</span></span>
<span id="cb34-8">df_pl.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item"</span>).is_in([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"staff"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"potion"</span>]))</span>
<span id="cb34-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Is not NA... consider also .is_not_null()</span></span>
<span id="cb34-10">df_pl.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"found_in"</span>).is_null())</span></code></pre></div>
</div>
</div>
</div>
</div>
</section>
<section id="replacing-values-in-row-slices" class="level2">
<h2 class="anchored" data-anchor-id="replacing-values-in-row-slices">Replacing values in row slices</h2>
<p>Let me explain this with an example relating to the dataset at hand. We are looking at the inventory of a particular wizard shop. In this magical universe, let’s suppose that we learn that every item with <code>magical_power</code> over 900 is cursed. There might be other reasons why an item is cursed, but these reasons are unknown to us.</p>
<p>What we can do is to filter the DataFrame to display only items with <code>magical_power</code> over 900 and using this filter, we write <code>True</code> to the <code>is_cursed</code> column for every row satisfying this condition.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-15-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-15-1" aria-controls="tabset-15-1" aria-selected="true" href="">1️⃣ pandas</a></li><li class="nav-item"><a class="nav-link" id="tabset-15-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-15-2" aria-controls="tabset-15-2" aria-selected="false" href="">2️⃣ polars</a></li></ul>
<div class="tab-content">
<div id="tabset-15-1" class="tab-pane active" aria-labelledby="tabset-15-1-tab">
<p>Label all items with <code>magical_power</code> over 900 as cursed.</p>
<div id="9e5dd64d" class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb35-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A column full of NAs should be cast as "object" first</span></span>
<span id="cb35-2">df_pd[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is_cursed"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_pd[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is_cursed"</span>].astype(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"object"</span>)</span>
<span id="cb35-3"></span>
<span id="cb35-4">df_pd.loc[df_pd[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"magical_power"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">900</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is_cursed"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb35-5">df_pd.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="34">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">id</th>
<th data-quarto-table-cell-role="th">item</th>
<th data-quarto-table-cell-role="th">price</th>
<th data-quarto-table-cell-role="th">magical_power</th>
<th data-quarto-table-cell-role="th">quality</th>
<th data-quarto-table-cell-role="th">in_stock</th>
<th data-quarto-table-cell-role="th">found_in</th>
<th data-quarto-table-cell-role="th">is_cursed</th>
<th data-quarto-table-cell-role="th">log_price</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<th data-quarto-table-cell-role="th">0</th>
<td>1</td>
<td>amulet</td>
<td>915.0</td>
<td>402.961</td>
<td>9</td>
<td>True</td>
<td>dungeon</td>
<td>NaN</td>
<td>6.818924</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">1</th>
<td>2</td>
<td>staff</td>
<td>2550.0</td>
<td>933.978</td>
<td>2</td>
<td>False</td>
<td>dungeon</td>
<td>True</td>
<td>7.843849</td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">2</th>
<td>3</td>
<td>potion</td>
<td>62.2</td>
<td>129.897</td>
<td>5</td>
<td>True</td>
<td>city</td>
<td>NaN</td>
<td>4.130355</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</div>
<div id="tabset-15-2" class="tab-pane" aria-labelledby="tabset-15-2-tab">
<p>Label all items with <code>magical_power</code> over 900 as cursed.</p>
<div id="dd3c7ba5" class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb36-1">df_pl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_pl.with_columns(</span>
<span id="cb36-2">    pl.when(pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"magical_power"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">900</span>)</span>
<span id="cb36-3">    .then(pl.lit(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>))</span>
<span id="cb36-4">    .otherwise(pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is_cursed"</span>))</span>
<span id="cb36-5">    .alias(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is_cursed"</span>)</span>
<span id="cb36-6">)</span>
<span id="cb36-7">df_pl.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="35">
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (3, 9)</small>
<table class="dataframe caption-top table table-sm table-striped small" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">id</th>
<th data-quarto-table-cell-role="th">item</th>
<th data-quarto-table-cell-role="th">price</th>
<th data-quarto-table-cell-role="th">magical_power</th>
<th data-quarto-table-cell-role="th">quality</th>
<th data-quarto-table-cell-role="th">in_stock</th>
<th data-quarto-table-cell-role="th">found_in</th>
<th data-quarto-table-cell-role="th">is_cursed</th>
<th data-quarto-table-cell-role="th">log_price</th>
</tr>
<tr class="even">
<td>i64</td>
<td>str</td>
<td>f64</td>
<td>f64</td>
<td>i64</td>
<td>bool</td>
<td>str</td>
<td>bool</td>
<td>f64</td>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>"amulet"</td>
<td>915.0</td>
<td>402.961</td>
<td>9</td>
<td>true</td>
<td>"dungeon"</td>
<td>null</td>
<td>6.818924</td>
</tr>
<tr class="even">
<td>2</td>
<td>"staff"</td>
<td>2550.0</td>
<td>933.978</td>
<td>2</td>
<td>false</td>
<td>"dungeon"</td>
<td>true</td>
<td>7.843849</td>
</tr>
<tr class="odd">
<td>3</td>
<td>"potion"</td>
<td>62.2</td>
<td>129.897</td>
<td>5</td>
<td>true</td>
<td>"city"</td>
<td>null</td>
<td>4.130355</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="create-a-copy" class="level2">
<h2 class="anchored" data-anchor-id="create-a-copy">Create a copy</h2>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-16-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-16-1" aria-controls="tabset-16-1" aria-selected="true" href="">1️⃣ pandas</a></li><li class="nav-item"><a class="nav-link" id="tabset-16-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-16-2" aria-controls="tabset-16-2" aria-selected="false" href="">2️⃣ polars</a></li></ul>
<div class="tab-content">
<div id="tabset-16-1" class="tab-pane active" aria-labelledby="tabset-16-1-tab">
<div id="de61bd5f" class="cell" data-execution_count="36">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb37-1">df_pd_temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_pd.copy()</span></code></pre></div>
</div>
</div>
<div id="tabset-16-2" class="tab-pane" aria-labelledby="tabset-16-2-tab">
<p>In <code>polars</code>, copying or <em>cloning</em> (<code>.clone()</code> method) may not be necessary.<sup>5</sup></p>
<div id="5afa439c" class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb38-1">df_pl_temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_pl</span></code></pre></div>
</div>
</div>
</div>
</div>
</section>
<section id="joining-data" class="level2">
<h2 class="anchored" data-anchor-id="joining-data">Joining data</h2>
<section id="inner-join" class="level3">
<h3 class="anchored" data-anchor-id="inner-join">Inner join</h3>
<p>The <code>info_pd</code> / <code>info_pl</code> table contains typical information (e.g., typical price) about each item in the fantasy universe this dataset was sourced from. Naturally, the shopkeeper has no incentive to provide this information in the original data. However, we can add the information from the info table to the main table ourselves.</p>
<p>In our case, we can use an “inner join” and match the items using the <code>item</code> column as long as</p>
<ul>
<li><p>both tables contain this column,</p></li>
<li><p>and the column itself serves the same purpose in both tables.</p></li>
</ul>
<p>If there would be an additional item in the shopkeeper’s inventory for which we wouldn’t have data in the <code>info</code> table, we may consider using an “outer join.” For a review of joins consider reading the following <a href="https://en.wikipedia.org/wiki/Join_(SQL)">Wiki article</a>.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-17-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-17-1" aria-controls="tabset-17-1" aria-selected="true" href="">1️⃣ pandas</a></li><li class="nav-item"><a class="nav-link" id="tabset-17-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-17-2" aria-controls="tabset-17-2" aria-selected="false" href="">2️⃣ polars</a></li></ul>
<div class="tab-content">
<div id="tabset-17-1" class="tab-pane active" aria-labelledby="tabset-17-1-tab">
<div id="df61714e" class="cell" data-execution_count="38">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb39-1">info_pd</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="38">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">item</th>
<th data-quarto-table-cell-role="th">typical_price</th>
<th data-quarto-table-cell-role="th">typical_quality</th>
<th data-quarto-table-cell-role="th">typically_found_in</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<th data-quarto-table-cell-role="th">0</th>
<td>amulet</td>
<td>1000</td>
<td>9</td>
<td>dungeon</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">1</th>
<td>potion</td>
<td>50</td>
<td>7</td>
<td>village</td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">2</th>
<td>cloak</td>
<td>500</td>
<td>4</td>
<td>city</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">3</th>
<td>staff</td>
<td>2000</td>
<td>5</td>
<td>dungeon</td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">4</th>
<td>scroll</td>
<td>900</td>
<td>2</td>
<td>dungeon</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="1abb3d2d" class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb40-1">df_full_pd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.merge(left<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df_pd, right<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>info_pd, how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inner"</span>, on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item"</span>)</span>
<span id="cb40-2">df_full_pd.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="39">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">id</th>
<th data-quarto-table-cell-role="th">item</th>
<th data-quarto-table-cell-role="th">price</th>
<th data-quarto-table-cell-role="th">magical_power</th>
<th data-quarto-table-cell-role="th">quality</th>
<th data-quarto-table-cell-role="th">in_stock</th>
<th data-quarto-table-cell-role="th">found_in</th>
<th data-quarto-table-cell-role="th">is_cursed</th>
<th data-quarto-table-cell-role="th">log_price</th>
<th data-quarto-table-cell-role="th">typical_price</th>
<th data-quarto-table-cell-role="th">typical_quality</th>
<th data-quarto-table-cell-role="th">typically_found_in</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<th data-quarto-table-cell-role="th">0</th>
<td>1</td>
<td>amulet</td>
<td>915.0</td>
<td>402.961</td>
<td>9</td>
<td>True</td>
<td>dungeon</td>
<td>NaN</td>
<td>6.818924</td>
<td>1000</td>
<td>9</td>
<td>dungeon</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">1</th>
<td>2</td>
<td>staff</td>
<td>2550.0</td>
<td>933.978</td>
<td>2</td>
<td>False</td>
<td>dungeon</td>
<td>True</td>
<td>7.843849</td>
<td>2000</td>
<td>5</td>
<td>dungeon</td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">2</th>
<td>3</td>
<td>potion</td>
<td>62.2</td>
<td>129.897</td>
<td>5</td>
<td>True</td>
<td>city</td>
<td>NaN</td>
<td>4.130355</td>
<td>50</td>
<td>7</td>
<td>village</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</div>
<div id="tabset-17-2" class="tab-pane" aria-labelledby="tabset-17-2-tab">
<div id="0f2793cc" class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb41-1">info_pl</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="40">
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (5, 4)</small>
<table class="dataframe caption-top table table-sm table-striped small" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">item</th>
<th data-quarto-table-cell-role="th">typical_price</th>
<th data-quarto-table-cell-role="th">typical_quality</th>
<th data-quarto-table-cell-role="th">typically_found_in</th>
</tr>
<tr class="even">
<td>str</td>
<td>i64</td>
<td>i64</td>
<td>str</td>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>"amulet"</td>
<td>1000</td>
<td>9</td>
<td>"dungeon"</td>
</tr>
<tr class="even">
<td>"potion"</td>
<td>50</td>
<td>7</td>
<td>"village"</td>
</tr>
<tr class="odd">
<td>"cloak"</td>
<td>500</td>
<td>4</td>
<td>"city"</td>
</tr>
<tr class="even">
<td>"staff"</td>
<td>2000</td>
<td>5</td>
<td>"dungeon"</td>
</tr>
<tr class="odd">
<td>"scroll"</td>
<td>900</td>
<td>2</td>
<td>"dungeon"</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div id="2dfce4ac" class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb42-1">df_full_pl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_pl.join(other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>info_pl, on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item"</span>, how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inner"</span>)</span>
<span id="cb42-2">df_full_pl.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="41">
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (3, 12)</small>
<table class="dataframe caption-top table table-sm table-striped small" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">id</th>
<th data-quarto-table-cell-role="th">item</th>
<th data-quarto-table-cell-role="th">price</th>
<th data-quarto-table-cell-role="th">magical_power</th>
<th data-quarto-table-cell-role="th">quality</th>
<th data-quarto-table-cell-role="th">in_stock</th>
<th data-quarto-table-cell-role="th">found_in</th>
<th data-quarto-table-cell-role="th">is_cursed</th>
<th data-quarto-table-cell-role="th">log_price</th>
<th data-quarto-table-cell-role="th">typical_price</th>
<th data-quarto-table-cell-role="th">typical_quality</th>
<th data-quarto-table-cell-role="th">typically_found_in</th>
</tr>
<tr class="even">
<td>i64</td>
<td>str</td>
<td>f64</td>
<td>f64</td>
<td>i64</td>
<td>bool</td>
<td>str</td>
<td>bool</td>
<td>f64</td>
<td>i64</td>
<td>i64</td>
<td>str</td>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>"amulet"</td>
<td>915.0</td>
<td>402.961</td>
<td>9</td>
<td>true</td>
<td>"dungeon"</td>
<td>null</td>
<td>6.818924</td>
<td>1000</td>
<td>9</td>
<td>"dungeon"</td>
</tr>
<tr class="even">
<td>2</td>
<td>"staff"</td>
<td>2550.0</td>
<td>933.978</td>
<td>2</td>
<td>false</td>
<td>"dungeon"</td>
<td>true</td>
<td>7.843849</td>
<td>2000</td>
<td>5</td>
<td>"dungeon"</td>
</tr>
<tr class="odd">
<td>3</td>
<td>"potion"</td>
<td>62.2</td>
<td>129.897</td>
<td>5</td>
<td>true</td>
<td>"city"</td>
<td>null</td>
<td>4.130355</td>
<td>50</td>
<td>7</td>
<td>"village"</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="concatenate-by-rows" class="level3">
<h3 class="anchored" data-anchor-id="concatenate-by-rows">Concatenate by rows</h3>
<p>Concatenating by rows stacks two tables on top of each other like bricks.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-18-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-18-1" aria-controls="tabset-18-1" aria-selected="true" href="">1️⃣ pandas</a></li><li class="nav-item"><a class="nav-link" id="tabset-18-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-18-2" aria-controls="tabset-18-2" aria-selected="false" href="">2️⃣ polars</a></li></ul>
<div class="tab-content">
<div id="tabset-18-1" class="tab-pane active" aria-labelledby="tabset-18-1-tab">
<div id="36862fc8" class="cell" data-execution_count="42">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb43-1">new_price <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(</span>
<span id="cb43-2">    {</span>
<span id="cb43-3">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"amulet"</span>: [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1005.1</span>],</span>
<span id="cb43-4">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"potion"</span>: [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">55.32</span>],</span>
<span id="cb43-5">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cloak"</span>: [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">550.06</span>],</span>
<span id="cb43-6">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"staff"</span>: [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1500.15</span>],</span>
<span id="cb43-7">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"scroll"</span>: [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1123.06</span>]</span>
<span id="cb43-8">    },</span>
<span id="cb43-9">    index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[datetime(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2026</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)]</span>
<span id="cb43-10">)</span>
<span id="cb43-11">pd.concat([prices_pd, new_price]).tail(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="42">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">amulet</th>
<th data-quarto-table-cell-role="th">potion</th>
<th data-quarto-table-cell-role="th">cloak</th>
<th data-quarto-table-cell-role="th">staff</th>
<th data-quarto-table-cell-role="th">scroll</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<th data-quarto-table-cell-role="th">2025-12-31</th>
<td>957.94</td>
<td>64.08</td>
<td>503.88</td>
<td>2899.72</td>
<td>829.59</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">2026-01-01</th>
<td>1005.10</td>
<td>55.32</td>
<td>550.06</td>
<td>1500.15</td>
<td>1123.06</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</div>
<div id="tabset-18-2" class="tab-pane" aria-labelledby="tabset-18-2-tab">
<div id="5e36f195" class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb44-1">new_price <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pl.DataFrame({</span>
<span id="cb44-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span>: date(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2026</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb44-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"amulet"</span>: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1005.1</span>,</span>
<span id="cb44-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"potion"</span>: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">55.32</span>,</span>
<span id="cb44-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cloak"</span>: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">550.06</span>,</span>
<span id="cb44-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"staff"</span>: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1500.15</span>,</span>
<span id="cb44-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"scroll"</span>: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1123.06</span></span>
<span id="cb44-8">})</span>
<span id="cb44-9">pl.concat([prices_pl, new_price]).tail(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="43">
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (2, 6)</small>
<table class="dataframe caption-top table table-sm table-striped small" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">date</th>
<th data-quarto-table-cell-role="th">amulet</th>
<th data-quarto-table-cell-role="th">potion</th>
<th data-quarto-table-cell-role="th">cloak</th>
<th data-quarto-table-cell-role="th">staff</th>
<th data-quarto-table-cell-role="th">scroll</th>
</tr>
<tr class="even">
<td>date</td>
<td>f64</td>
<td>f64</td>
<td>f64</td>
<td>f64</td>
<td>f64</td>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>2025-12-31</td>
<td>957.94</td>
<td>64.08</td>
<td>503.88</td>
<td>2899.72</td>
<td>829.59</td>
</tr>
<tr class="even">
<td>2026-01-01</td>
<td>1005.1</td>
<td>55.32</td>
<td>550.06</td>
<td>1500.15</td>
<td>1123.06</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="quick-plotting" class="level2">
<h2 class="anchored" data-anchor-id="quick-plotting">Quick plotting</h2>
<p>DataFrames in <code>pandas</code> can be quickly plotted using the <code>.plot()</code> method. While <code>polars</code> also contains quick plotting capabilities, I prefer converting the DataFrame to <code>pandas</code>. For more complex plots, consider using <code>seaborn</code>, <code>bokeh</code>, <code>plotly</code>, <code>altair</code>, or any other data visualization library.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-19-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-19-1" aria-controls="tabset-19-1" aria-selected="true" href="">1️⃣ pandas</a></li><li class="nav-item"><a class="nav-link" id="tabset-19-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-19-2" aria-controls="tabset-19-2" aria-selected="false" href="">2️⃣ polars</a></li></ul>
<div class="tab-content">
<div id="tabset-19-1" class="tab-pane active" aria-labelledby="tabset-19-1-tab">
<p>Display the mean quality of the shopkeeper’s items vs the typical quality of each item.</p>
<div id="e7c7bf29" class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb45-1">quality_pd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_full_pd[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"quality"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"typical_quality"</span>]]</span>
<span id="cb45-2">quality_pd.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item"</span>).mean().plot(kind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bar"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://rnd195.github.io/posts/my-pd-pl-guide/index_files/figure-html/cell-45-output-1.png" width="558" height="463" class="figure-img"></p>
</figure>
</div>
</div>
</div>
</div>
<div id="tabset-19-2" class="tab-pane" aria-labelledby="tabset-19-2-tab">
<p>Display the mean quality of the shopkeeper’s items vs the typical quality of each item.</p>
<div id="90b44648" class="cell" data-execution_count="45">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb46-1">quality_pl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_full_pl.to_pandas()[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"quality"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"typical_quality"</span>]]</span>
<span id="cb46-2">quality_pl.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item"</span>).mean().plot(kind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bar"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://rnd195.github.io/posts/my-pd-pl-guide/index_files/figure-html/cell-46-output-1.png" width="558" height="463" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<div class="sourceCode" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb47-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Similar plot in polars via Altair (not displayed)</span></span>
<span id="cb47-2">(</span>
<span id="cb47-3">    df_full_pl.group_by(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item"</span>)</span>
<span id="cb47-4">    .mean()</span>
<span id="cb47-5">    .select(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"quality"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"typical_quality"</span>)</span>
<span id="cb47-6">    .unpivot(index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item"</span>)</span>
<span id="cb47-7">    .plot.bar(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item"</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"variable"</span>, column<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"variable"</span>)</span>
<span id="cb47-8">)</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="dates" class="level2">
<h2 class="anchored" data-anchor-id="dates">Dates</h2>
<section id="create-a-range-of-dates" class="level3">
<h3 class="anchored" data-anchor-id="create-a-range-of-dates">Create a range of dates</h3>
<p>The <code>pandas</code> package is great for time series data. It offers valuable functions like <code>date_range()</code> or <code>to_datetime()</code>. <code>polars</code> also has special capabilities for handling time series data, though it seems to me that it expects the user to utilize the <code>datetime</code> module more than <code>pandas</code>.</p>
<p>Another difference is that <code>polars</code> may return an expression instead of the actual Series of dates by default. This is why you’ll see me using <code>eager=True</code> to get a Series instead of an expression.</p>
<p>Let’s take a look at some of the basic operations with dates.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-20-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-20-1" aria-controls="tabset-20-1" aria-selected="true" href="">1️⃣ pandas</a></li><li class="nav-item"><a class="nav-link" id="tabset-20-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-20-2" aria-controls="tabset-20-2" aria-selected="false" href="">2️⃣ polars</a></li></ul>
<div class="tab-content">
<div id="tabset-20-1" class="tab-pane active" aria-labelledby="tabset-20-1-tab">
<p>Make a range of dates from a specific date (and time) to a specific date (and time).</p>
<div id="e4234b30" class="cell" data-execution_count="46">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb48-1">pd.date_range(</span>
<span id="cb48-2">    start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2025-01-01 00:00"</span>,</span>
<span id="cb48-3">    end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2025-01-01 23:00"</span>, </span>
<span id="cb48-4">    freq<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"h"</span>,</span>
<span id="cb48-5">    tz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Europe/Prague"</span></span>
<span id="cb48-6">)</span></code></pre></div>
</div>
</div>
<div id="tabset-20-2" class="tab-pane" aria-labelledby="tabset-20-2-tab">
<p>Make a range of dates from a specific date (and time) to a specific date (and time).</p>
<div id="34956d27" class="cell" data-execution_count="47">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb49-1">pl.datetime_range(</span>
<span id="cb49-2">    start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>datetime(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2025</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), </span>
<span id="cb49-3">    end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>datetime(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2025</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb49-4">    interval<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1h"</span>,</span>
<span id="cb49-5">    eager<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb49-6">    time_zone<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Europe/Prague"</span></span>
<span id="cb49-7">)</span>
<span id="cb49-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Alternative start/end: datetime.fromisoformat("2025-01-01 00:00")</span></span></code></pre></div>
</div>
</div>
</div>
</div>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-21-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-21-1" aria-controls="tabset-21-1" aria-selected="true" href="">1️⃣ pandas</a></li><li class="nav-item"><a class="nav-link" id="tabset-21-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-21-2" aria-controls="tabset-21-2" aria-selected="false" href="">2️⃣ polars</a></li></ul>
<div class="tab-content">
<div id="tabset-21-1" class="tab-pane active" aria-labelledby="tabset-21-1-tab">
<p>Create a date range with a specific number of periods. For instance, start at <code>2025-01-01</code> and continue 100 days into the future.</p>
<div id="3deea3ed" class="cell" data-execution_count="48">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb50-1">out_periods <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb50-2"></span>
<span id="cb50-3">pd.date_range(</span>
<span id="cb50-4">    start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2025-01-01"</span>, </span>
<span id="cb50-5">    periods<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>out_periods, </span>
<span id="cb50-6">    freq<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span></span>
<span id="cb50-7">)</span></code></pre></div>
</div>
</div>
<div id="tabset-21-2" class="tab-pane" aria-labelledby="tabset-21-2-tab">
<p>Create a date range with a specific number of periods. For instance, start at <code>2025-01-01</code> and continue 100 days into the future.</p>
<div id="ab463579" class="cell" data-execution_count="49">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb51-1">out_periods <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb51-2"></span>
<span id="cb51-3">pl.date_range(</span>
<span id="cb51-4">    start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>date(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2025</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb51-5">    end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>date(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2025</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> timedelta(days<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>out_periods <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb51-6">    interval<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1d"</span>,</span>
<span id="cb51-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Returns a Series if True, otherwise returns an expression</span></span>
<span id="cb51-8">    eager<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb51-9">)</span></code></pre></div>
</div>
</div>
</div>
</div>
</section>
<section id="subset-a-specific-time-interval" class="level3">
<h3 class="anchored" data-anchor-id="subset-a-specific-time-interval">Subset a specific time interval</h3>
<p>Suppose we want to take a look at February data in our price table.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-22-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-22-1" aria-controls="tabset-22-1" aria-selected="true" href="">1️⃣ pandas</a></li><li class="nav-item"><a class="nav-link" id="tabset-22-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-22-2" aria-controls="tabset-22-2" aria-selected="false" href="">2️⃣ polars</a></li></ul>
<div class="tab-content">
<div id="tabset-22-1" class="tab-pane active" aria-labelledby="tabset-22-1-tab">
<div id="729b1b89" class="cell" data-execution_count="50">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb52-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prices in February</span></span>
<span id="cb52-2">prices_pd[prices_pd.index.month <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="50">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">amulet</th>
<th data-quarto-table-cell-role="th">potion</th>
<th data-quarto-table-cell-role="th">cloak</th>
<th data-quarto-table-cell-role="th">staff</th>
<th data-quarto-table-cell-role="th">scroll</th>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">date</th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<th data-quarto-table-cell-role="th">2025-02-01</th>
<td>1200.15</td>
<td>45.70</td>
<td>441.72</td>
<td>1315.41</td>
<td>604.27</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">2025-02-02</th>
<td>828.88</td>
<td>55.32</td>
<td>526.56</td>
<td>1591.24</td>
<td>628.25</td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">2025-02-03</th>
<td>774.96</td>
<td>47.35</td>
<td>515.86</td>
<td>1924.56</td>
<td>969.40</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">2025-02-04</th>
<td>842.21</td>
<td>53.05</td>
<td>522.74</td>
<td>2305.17</td>
<td>991.64</td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">2025-02-05</th>
<td>1147.03</td>
<td>53.27</td>
<td>583.07</td>
<td>2222.09</td>
<td>1529.96</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</div>
<div id="tabset-22-2" class="tab-pane" aria-labelledby="tabset-22-2-tab">
<div id="7de73b32" class="cell" data-execution_count="51">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb53-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prices in February</span></span>
<span id="cb53-2">prices_pl.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span>).dt.month() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="51">
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (5, 6)</small>
<table class="dataframe caption-top table table-sm table-striped small" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">date</th>
<th data-quarto-table-cell-role="th">amulet</th>
<th data-quarto-table-cell-role="th">potion</th>
<th data-quarto-table-cell-role="th">cloak</th>
<th data-quarto-table-cell-role="th">staff</th>
<th data-quarto-table-cell-role="th">scroll</th>
</tr>
<tr class="even">
<td>date</td>
<td>f64</td>
<td>f64</td>
<td>f64</td>
<td>f64</td>
<td>f64</td>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>2025-02-01</td>
<td>1200.15</td>
<td>45.7</td>
<td>441.72</td>
<td>1315.41</td>
<td>604.27</td>
</tr>
<tr class="even">
<td>2025-02-02</td>
<td>828.88</td>
<td>55.32</td>
<td>526.56</td>
<td>1591.24</td>
<td>628.25</td>
</tr>
<tr class="odd">
<td>2025-02-03</td>
<td>774.96</td>
<td>47.35</td>
<td>515.86</td>
<td>1924.56</td>
<td>969.4</td>
</tr>
<tr class="even">
<td>2025-02-04</td>
<td>842.21</td>
<td>53.05</td>
<td>522.74</td>
<td>2305.17</td>
<td>991.64</td>
</tr>
<tr class="odd">
<td>2025-02-05</td>
<td>1147.03</td>
<td>53.27</td>
<td>583.07</td>
<td>2222.09</td>
<td>1529.96</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="resampling" class="level3">
<h3 class="anchored" data-anchor-id="resampling">Resampling</h3>
<p>In time series analysis, we often need to change the frequency of our data. For instance, if we have daily data, we may want to look at monthly averages, yearly max values, and so on.</p>
<p>Conversely, suppose we want to join a daily and an hourly dataset. In this case, we may need to convert the daily time series to hourly. We can do this by, for example, repeating the daily value for each hour or by using interpolation.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-23-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-23-1" aria-controls="tabset-23-1" aria-selected="true" href="">1️⃣ pandas</a></li><li class="nav-item"><a class="nav-link" id="tabset-23-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-23-2" aria-controls="tabset-23-2" aria-selected="false" href="">2️⃣ polars</a></li></ul>
<div class="tab-content">
<div id="tabset-23-1" class="tab-pane active" aria-labelledby="tabset-23-1-tab">
<div id="24daf702" class="cell" data-execution_count="52">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb54-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Monthly mean from daily data</span></span>
<span id="cb54-2">prices_pd.resample(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ME"</span>).mean()</span>
<span id="cb54-3"></span>
<span id="cb54-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Upsample daily data to hourly by repeating values</span></span>
<span id="cb54-5">prices_pd.resample(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"h"</span>).ffill()</span>
<span id="cb54-6"></span>
<span id="cb54-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Upsample daily data to hourly by interpolating (linearly)</span></span>
<span id="cb54-8">prices_pd.resample(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"h"</span>).interpolate(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"linear"</span>)</span></code></pre></div>
</div>
</div>
<div id="tabset-23-2" class="tab-pane" aria-labelledby="tabset-23-2-tab">
<div id="c51f6d27" class="cell" data-execution_count="53">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb55-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Monthly mean from daily data</span></span>
<span id="cb55-2">prices_pl.group_by_dynamic(</span>
<span id="cb55-3">    index_column<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span>,</span>
<span id="cb55-4">    every<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1mo"</span></span>
<span id="cb55-5">).agg(pl.selectors.numeric().mean())</span>
<span id="cb55-6"></span>
<span id="cb55-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Upsample daily data to hourly by repeating values</span></span>
<span id="cb55-8">prices_pl.upsample(</span>
<span id="cb55-9">    time_column<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span>,</span>
<span id="cb55-10">    every<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1h"</span></span>
<span id="cb55-11">).select(pl.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span>().forward_fill())</span>
<span id="cb55-12"></span>
<span id="cb55-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Upsample daily data to hourly by interpolating (linearly)</span></span>
<span id="cb55-14">prices_pl.upsample(</span>
<span id="cb55-15">    time_column<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span>,</span>
<span id="cb55-16">    every<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1h"</span></span>
<span id="cb55-17">).interpolate()</span></code></pre></div>
</div>
</div>
</div>
</div>
</section>
<section id="group-by-time-intervals" class="level3">
<h3 class="anchored" data-anchor-id="group-by-time-intervals">Group by time intervals</h3>
<p>We can also group data by specific time intervals. For instance, we can calculate the median price of each item in 3-month windows.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-24-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-24-1" aria-controls="tabset-24-1" aria-selected="true" href="">1️⃣ pandas</a></li><li class="nav-item"><a class="nav-link" id="tabset-24-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-24-2" aria-controls="tabset-24-2" aria-selected="false" href="">2️⃣ polars</a></li></ul>
<div class="tab-content">
<div id="tabset-24-1" class="tab-pane active" aria-labelledby="tabset-24-1-tab">
<div id="ed8c46bd" class="cell" data-execution_count="54">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb56-1">prices_pd.groupby(pd.Grouper(freq<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3MS"</span>)).median()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="54">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">amulet</th>
<th data-quarto-table-cell-role="th">potion</th>
<th data-quarto-table-cell-role="th">cloak</th>
<th data-quarto-table-cell-role="th">staff</th>
<th data-quarto-table-cell-role="th">scroll</th>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">date</th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<th data-quarto-table-cell-role="th">2025-01-01</th>
<td>973.755</td>
<td>49.995</td>
<td>503.050</td>
<td>2043.170</td>
<td>966.495</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">2025-04-01</th>
<td>990.040</td>
<td>49.340</td>
<td>505.000</td>
<td>1931.890</td>
<td>870.100</td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">2025-07-01</th>
<td>1051.605</td>
<td>50.345</td>
<td>499.150</td>
<td>2005.865</td>
<td>850.470</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">2025-10-01</th>
<td>991.855</td>
<td>49.620</td>
<td>509.435</td>
<td>1997.755</td>
<td>851.620</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</div>
<div id="tabset-24-2" class="tab-pane" aria-labelledby="tabset-24-2-tab">
<p>Some people (<a href="https://docs.pola.rs/user-guide/misc/styling/#full-example">example</a> in the official docs) format longer <code>polars</code> code like this:</p>
<div id="a6356051" class="cell" data-execution_count="55">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb57-1">(</span>
<span id="cb57-2">    prices_pl</span>
<span id="cb57-3">    .group_by_dynamic(index_column<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span>, every<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3mo"</span>)</span>
<span id="cb57-4">    .agg(pl.selectors.numeric().median())</span>
<span id="cb57-5">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="55">
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (4, 6)</small>
<table class="dataframe caption-top table table-sm table-striped small" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">date</th>
<th data-quarto-table-cell-role="th">amulet</th>
<th data-quarto-table-cell-role="th">potion</th>
<th data-quarto-table-cell-role="th">cloak</th>
<th data-quarto-table-cell-role="th">staff</th>
<th data-quarto-table-cell-role="th">scroll</th>
</tr>
<tr class="even">
<td>date</td>
<td>f64</td>
<td>f64</td>
<td>f64</td>
<td>f64</td>
<td>f64</td>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>2025-01-01</td>
<td>973.755</td>
<td>49.995</td>
<td>503.05</td>
<td>2043.17</td>
<td>966.495</td>
</tr>
<tr class="even">
<td>2025-04-01</td>
<td>990.04</td>
<td>49.34</td>
<td>505.0</td>
<td>1931.89</td>
<td>870.1</td>
</tr>
<tr class="odd">
<td>2025-07-01</td>
<td>1051.605</td>
<td>50.345</td>
<td>499.15</td>
<td>2005.865</td>
<td>850.47</td>
</tr>
<tr class="even">
<td>2025-10-01</td>
<td>991.855</td>
<td>49.62</td>
<td>509.435</td>
<td>1997.755</td>
<td>851.62</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="saving-data" class="level2">
<h2 class="anchored" data-anchor-id="saving-data">Saving data</h2>
<p>Both packages support a large number of output formats and the syntax is similar.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-25-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-25-1" aria-controls="tabset-25-1" aria-selected="true" href="">1️⃣ pandas</a></li><li class="nav-item"><a class="nav-link" id="tabset-25-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-25-2" aria-controls="tabset-25-2" aria-selected="false" href="">2️⃣ polars</a></li></ul>
<div class="tab-content">
<div id="tabset-25-1" class="tab-pane active" aria-labelledby="tabset-25-1-tab">
<div class="sourceCode" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb58-1">df_pd.to_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"file.csv"</span>)</span></code></pre></div>
</div>
<div id="tabset-25-2" class="tab-pane" aria-labelledby="tabset-25-2-tab">
<div class="sourceCode" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb59-1">df_pl.write_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"file.csv"</span>)</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="sources-and-further-reading" class="level2">
<h2 class="anchored" data-anchor-id="sources-and-further-reading">Sources and further reading</h2>
<p>This guide is mainly based on information from</p>
<ul>
<li><a href="https://docs.pola.rs/" class="uri">https://docs.pola.rs/</a></li>
<li><a href="https://pandas.pydata.org/docs/" class="uri">https://pandas.pydata.org/docs/</a></li>
</ul>
<p>It’s also loosely inspired by Keith Galli’s incredible <code>pandas</code> tutorial on YouTube</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=vmEHCJofslg" class="uri">https://www.youtube.com/watch?v=vmEHCJofslg</a></li>
</ul>
<p>Let me also mention a neat cheat sheet on going from <code>pandas</code> to <code>polars</code> on Rho Signal</p>
<ul>
<li><a href="https://www.rhosignal.com/posts/polars-pandas-cheatsheet/" class="uri">https://www.rhosignal.com/posts/polars-pandas-cheatsheet/</a></li>
</ul>
<p>Finally, for more advanced and extensive coverage of <code>polars</code> x <code>pandas</code>, I would highly recommend “Modern Polars”</p>
<ul>
<li><a href="https://kevinheavey.github.io/modern-polars/" class="uri">https://kevinheavey.github.io/modern-polars/</a></li>
</ul>
<p><br> <a href="https://github.com/rnd195/rnd195.github.io-comments/issues/3" class="btn btn-secondary bi-chat" title="Comment on GitHub" target="_blank">Comment on GitHub</a></p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>For stylistic purposes, let me refer to the Polars package as <code>polars</code>.↩︎</p></li>
<li id="fn2"><p>33.4k stars in early May 2025 <a href="https://github.com/pola-rs/polars" class="uri">https://github.com/pola-rs/polars</a>.↩︎</p></li>
<li id="fn3"><p>JetBrains (2023). “What is Polars?” on YouTube. <a href="https://www.youtube.com/watch?v=QfLzEp-yt_U" class="uri">https://www.youtube.com/watch?v=QfLzEp-yt_U</a>.↩︎</p></li>
<li id="fn4"><p>See <a href="https://github.com/rnd195/wizard-shop-dataset" class="uri">https://github.com/rnd195/wizard-shop-dataset</a>↩︎</p></li>
<li id="fn5"><p>See <a href="https://stackoverflow.com/a/78136839" class="uri">https://stackoverflow.com/a/78136839</a>↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div>Content of this blogpost is licensed under Creative Commons Attribution CC BY 4.0. Any content used from other sources is indicated and is  not covered by this license.
<a rel="license" href="https://creativecommons.org/licenses/by/4.0/">(View License)</a></div></div></section></div> ]]></description>
  <category>python</category>
  <guid>https://rnd195.github.io/posts/my-pd-pl-guide/</guid>
  <pubDate>Sun, 04 May 2025 22:00:00 GMT</pubDate>
  <media:content url="https://rnd195.github.io/posts/my-pd-pl-guide/thumbnail.png" medium="image" type="image/png" height="60" width="144"/>
</item>
<item>
  <title>Reflections on FOSDEM 2025</title>
  <dc:creator>Martin Řanda</dc:creator>
  <link>https://rnd195.github.io/posts/reflections-fosdem-2025/</link>
  <description><![CDATA[ 





<p>Briefly reflecting on my first-ever attendance of the FOSDEM conference</p>
<p><img src="https://rnd195.github.io/posts/reflections-fosdem-2025/thumbnail.png" class="img-fluid" alt="Simple drawing depicting a lecture hall"></p>
<section id="about-the-event-and-my-takeaways" class="level2">
<h2 class="anchored" data-anchor-id="about-the-event-and-my-takeaways">About the event and my takeaways</h2>
<p>FOSDEM<sup>1</sup> is the largest conference about free and open source software.<sup>2</sup> This year’s event was held for the 25th time in the first two days of February, and I was fortunate enough to be attending. It was my first time participating in the event, and what I was initially struck by (in a positive way) was the conference’s turnout. In fact, so many people showed up to the event that, on several occasions throughout the first day, my connection to the cellular network had trouble keeping up.</p>
<p>Among other things, the event consisted of talks/lectures/panels on topics such as Android, Python, Security, and 70+ other <em>tracks</em>.<sup>3</sup> I overheard some people describing the event as <em>chaotic</em> and while I get that the sheer size of the conference could give this impression, I feel like calling it “chaotic” takes away from the impressive level of planning and organization demonstrated by the team behind the conference. For instance, each talk was streamed live and recorded, every block that I attended was on schedule, the event even had companion apps, and so much more.</p>
<p>The topics that I was mainly interested in were centered around data science, Python, as well as legal &amp; policy. I particularly enjoyed the panel discussion on what it means for an <em>AI system</em> or a machine learning model to be free/open.<sup>4</sup> It was also great to meet some of the people behind the PyArrow<sup>5</sup> package—I typically use PyArrow for data storage via the <code>.parquet</code> file format, and while this is only a small portion of the package’s capabilities, I consider it to be such a time (&amp; disk space) saver. Last but not least, I attended a talk about commercially viable companies that focus on developing open source software and what it takes to be respected by the open source community.<sup>6</sup></p>
</section>
<section id="a-first-timers-tips-for-future-first-timers" class="level2">
<h2 class="anchored" data-anchor-id="a-first-timers-tips-for-future-first-timers">A first-timer’s tips for future first-timers</h2>
<p>Before the introductory keynote speech began, I asked an experienced FOSDEM-goer who sat next to me for tips on how to get the most out of the conference. The gentleman said that there is no wrong way to experience the event, and it’s really up to each attendee to make the most out of it.</p>
<p>From my experience, it’s best to be prepared for the highly likely possibility that you won’t be able to visit all the talks that you planned to visit due to time and room capacity constraints. Therefore, I would suggest choosing a few developer rooms that you can retreat to if things don’t go according to the plan. Each talk is live-streamed and recorded (available a week or so after the event), so I wouldn’t really worry about missing a particular talk. I think that the added value of this event is that it is in-person. I would instead focus on that.</p>
<p>For more tips and insights about the event in general, allow me to recommend <a href="https://ounapuu.ee/posts/2024/02/12/fosdem-2024/">this detailed write-up</a> on the <code>./techtipsy</code> blog about last year’s event.</p>
<p><br> <a href="https://github.com/rnd195/rnd195.github.io-comments/issues/2" class="btn btn-secondary bi-chat" title="Comment on GitHub" target="_blank">Comment on GitHub</a></p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p><a href="https://fosdem.org/" class="uri">https://fosdem.org/</a>↩︎</p></li>
<li id="fn2"><p><a href="https://fosdem.org/2025/schedule/event/fosdem-2025-6712-welcome-to-fosdem-2025/" class="uri">https://fosdem.org/2025/schedule/event/fosdem-2025-6712-welcome-to-fosdem-2025/</a>, 5:40↩︎</p></li>
<li id="fn3"><p><a href="https://fosdem.org/2025/schedule/#devrooms" class="uri">https://fosdem.org/2025/schedule/#devrooms</a>↩︎</p></li>
<li id="fn4"><p><a href="https://fosdem.org/2025/schedule/event/fosdem-2025-6639-panel-when-is-an-ai-system-free-open-/" class="uri">https://fosdem.org/2025/schedule/event/fosdem-2025-6639-panel-when-is-an-ai-system-free-open-/</a>↩︎</p></li>
<li id="fn5"><p><a href="https://fosdem.org/2025/schedule/event/fosdem-2025-6092-what-can-pyarrow-do-for-you-array-interchange-storage-compute-and-transport/" class="uri">https://fosdem.org/2025/schedule/event/fosdem-2025-6092-what-can-pyarrow-do-for-you-array-interchange-storage-compute-and-transport/</a>↩︎</p></li>
<li id="fn6"><p><a href="https://fosdem.org/2025/schedule/event/fosdem-2025-5320-build-a-great-business-on-open-source-without-selling-your-soul/" class="uri">https://fosdem.org/2025/schedule/event/fosdem-2025-5320-build-a-great-business-on-open-source-without-selling-your-soul/</a>↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div>Content of this blogpost is licensed under Creative Commons Attribution CC BY 4.0. Any content used from other sources is indicated and is  not covered by this license.
<a rel="license" href="https://creativecommons.org/licenses/by/4.0/">(View License)</a></div></div></section></div> ]]></description>
  <category>events</category>
  <guid>https://rnd195.github.io/posts/reflections-fosdem-2025/</guid>
  <pubDate>Fri, 14 Feb 2025 23:00:00 GMT</pubDate>
  <media:content url="https://rnd195.github.io/posts/reflections-fosdem-2025/thumbnail.png" medium="image" type="image/png" height="95" width="144"/>
</item>
<item>
  <title>Benchmarking TimesFM on Electricity Consumption Data</title>
  <dc:creator>Martin Řanda</dc:creator>
  <link>https://rnd195.github.io/posts/tfm-electricity-consumption/</link>
  <description><![CDATA[ 





<p>Generating forecasts of Finnish electricity consumption using the TimesFM 200M model by Google Research</p>
<p><img src="https://rnd195.github.io/posts/tfm-electricity-consumption/thumbnail.jpg" class="img-fluid" alt="Drawing of a graph with two overlaying wavy curves"></p>
<hr>
<p>In early 2024, Google Research announced TimesFM, a <strong><em>pre-trained univariate time-series foundation</em></strong> model for <strong><em>time-series forecasting</em></strong>.<sup>1</sup> First, let me break down the terminology. The general idea is that this is a model for sequences of data that are ordered in time (<strong><em>time-series</em></strong>). A few examples of time-series include: annual inflation rate, monthly precipitation, weekly water demand, or hourly temperatures. This being a <strong><em>forecasting</em></strong> model simply means that we are interested in predicting the future. <strong><em>Univariate</em></strong> implies that this model only takes in and outputs a single time-series—in other words, no other variables are utilized. <strong><em>Pre-trained</em></strong> means, for our purposes, that we don’t need to run the complex process of training the model. We simply download a large file that contains all the 200M parameters for the model to produce forecasts. Finally, a <strong><em>foundation</em></strong> model is one that has been pre-trained on a large number of diverse datasets.<sup>2</sup></p>
<p>To be honest, when I first read about this model, I realized that I have never used a pre-trained time-series model. And it’s not like these didn’t exist before. In fact, several pre-trained foundation models have been released (see, for example<sup>3</sup>). But seeing Google Research announce their pre-trained time-series forecasting model put this whole category of models on my radar.</p>
<p>In their paper on TimesFM,<sup>4</sup> the authors tested the model’s performance on popular time-series datasets and demonstrated that TimesFM was, in the majority of cases, able to outperform both classical and deep learning models using their methodology. For this reason, I was interested in knowing how well it would forecast something I am familiar with—electricity consumption.</p>
<section id="data" class="level2">
<h2 class="anchored" data-anchor-id="data">Data</h2>
<p>Specifically, I decided to use electricity consumption data from the operator of the Finnish grid through their Open Data portal.<sup>5</sup> At this point, I believe that it is important to give my words of appreciation to the people at Fingrid for providing easy access to the data with clear license terms. In my view, this is the way open data should be done, so thank you!</p>
<p>From my experience, electricity consumption in (most of?) Europe typically follows these three major seasonal patterns:</p>
<div id="fig-simple" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-simple-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://rnd195.github.io/posts/tfm-electricity-consumption/index.assets/image-20250114214020887.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-simple-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: Simplified electricity consumption pattern in (most of?) Europe
</figcaption>
</figure>
</div>
<p>Firstly, there’s typically high electricity consumption in winter, lowering in spring, low during summer months, and slowly climbing upward in autumn. Note that the dip at the end of the year is due to winter holidays and it can be quite substantial. Secondly, on a typical work week, the Monday to Friday pattern looks fairly similar, but there is lower electricity consumption during the weekend. Finally, if we look at a single day’s worth of electricity consumption data, there will likely be less electricity consumed at night and consumption will peak around midday, perhaps in the afternoon, or early evening.</p>
<p>If we look at hourly electricity consumption in Finland (resampled from 15-min by averaging), I can cherry-pick specific weeks or days to make the series look similar to the patterns illustrated above. However, the full 2024 snapshot makes it clear that electricity consumption patterns in Finland are more nuanced.</p>
<div id="fig-cons" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-cons-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://rnd195.github.io/posts/tfm-electricity-consumption/index.assets/consumption_finland.jpg" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-cons-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: Hourly electricity consumption in Finland (MWh), 2024
</figcaption>
</figure>
</div>
</section>
<section id="setup" class="level2">
<h2 class="anchored" data-anchor-id="setup">Setup</h2>
<p>I will be benchmarking the 200M parameter model on the whole 2024 hourly consumption data illustrated above. Naturally, we already know what the 2024 electricity consumption looks like, but it would be highly impractical to produce forecasts from the current point in time onward while waiting for the future to materialize to collect the data and determine the accuracy of our predictions. Instead, we can go step by step, limiting the <em>knowledge</em> our forecasting model takes in, generate forecasts at that point in time, and immediately compare against the actual values. This is called <em>pseudo-out-of-sample</em> forecasting (see, for example<sup>6</sup>).</p>
<p>In electricity consumption forecasting, it often makes sense to think about the data in full days, not just individual hours. Therefore, I will be forecasting up to 24 hours ahead following the scheme described below:</p>
<ul>
<li><p>Start on Jan 1st 2024, 00:00 – this will be the first prediction</p></li>
<li><p>With no knowledge of electricity consumption on Jan 1st, produce forecasts up to 23:00 (included)</p></li>
<li><p>Save these forecasts and move by one day</p></li>
<li><p>Generate predictions for Jan 2nd (00:00, 01:00, …, 23:00)</p></li>
<li><p>Move by one day</p></li>
<li><p>Continue until you reach Dec 31st 2024</p></li>
</ul>
<p>Below is an illustration of the scheme—the three vertical lines are the starting points for each 24-hour prediction as well as a knowledge-cutoff line. The dashed curves illustrate predictions while the solid line is meant to represent actual values that are not “seen” by the model beforehand.</p>
<div id="fig-scheme" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-scheme-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://rnd195.github.io/posts/tfm-electricity-consumption/index.assets/image-20250114220537439.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-scheme-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;3: Forecasting scheme illustration
</figcaption>
</figure>
</div>
<p>To produce the forecasts, I am using the official <code>timesfm</code> <a href="https://github.com/google-research/timesfm">Python package</a> and the package-specific code only really takes a few lines if we leave all other hyperparameters set to their default values.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Up to 24 hours ahead</span></span>
<span id="cb1-2">horizon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define model parameters</span></span>
<span id="cb1-4">model_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> timesfm.TimesFmHparams(</span>
<span id="cb1-5">    backend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpu"</span>,</span>
<span id="cb1-6">    horizon_len<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>horizon</span>
<span id="cb1-7">)</span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load checkpoint from huggingface</span></span>
<span id="cb1-9">hf_checkpoint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> timesfm.TimesFmCheckpoint(</span>
<span id="cb1-10">    huggingface_repo_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"google/timesfm-1.0-200m-pytorch"</span></span>
<span id="cb1-11">)</span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Setup the model</span></span>
<span id="cb1-13">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> timesfm.TimesFm(</span>
<span id="cb1-14">    hparams<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model_params,</span>
<span id="cb1-15">    checkpoint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>hf_checkpoint</span>
<span id="cb1-16">)</span></code></pre></div>
<p>Assuming that our data is stored in a <code>pandas</code> DataFrame, we can produce forecasts by running</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1">fcst <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.forecast_on_df(</span>
<span id="cb2-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Formatted dataframe</span></span>
<span id="cb2-3">    inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df,</span>
<span id="cb2-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Data frequency (hourly)</span></span>
<span id="cb2-5">    freq<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"h"</span>,</span>
<span id="cb2-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Target variable column name</span></span>
<span id="cb2-7">    value_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"consumption"</span>,</span>
<span id="cb2-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -1 sets the number of processes to cpu count</span></span>
<span id="cb2-9">    num_jobs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-10">)</span></code></pre></div>
<p>And that’s about it. You may find the whole implementation in a Jupyter notebook linked in the floating table of contents on the right (or <a href="https://github.com/rnd195/tfm-electricity-consumption">here</a>).</p>
</section>
<section id="results" class="level2">
<h2 class="anchored" data-anchor-id="results">Results</h2>
<p>Firstly, let me briefly summarize the setup and all the parameters used to generate the forecasts:</p>
<ul>
<li>Data
<ul>
<li>electricity consumption in Finland in MWh</li>
<li>hourly frequency (resampled from 15-min by averaging)</li>
<li>start 2024-01-01 00:00, end 2024-12-31 23:00 (excluding some missing values)</li>
</ul></li>
<li>Forecasting scheme
<ul>
<li>up to 24 hours ahead</li>
<li>start at 00:00, generate predictions up to 23:00 each day, and move to the next day</li>
</ul></li>
<li>Model
<ul>
<li>TimesFM 200M with default parameters</li>
</ul></li>
</ul>
<section id="plots" class="level3">
<h3 class="anchored" data-anchor-id="plots">Plots</h3>
<p>For visual convenience, I connected all the forecasts into a single series. However, let me once again note that the predictions were generated for each day separately (denoted by the vertical gridlines).</p>
<p>With that in mind, let’s take a look at some of the forecasts (in red) versus actual values (in blue), starting in the first week of Jan 2024:</p>
<div id="fig-jan" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-jan-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://rnd195.github.io/posts/tfm-electricity-consumption/index.assets/image-20250118145824209.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-jan-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;4: Forecasts vs actual values (first week of Jan 2024)
</figcaption>
</figure>
</div>
<p>My first thoughts are that the model is somewhat capable of capturing the general day/night pattern as well as the rough daily consumption level (with some exceptions). However, it seems to struggle with the shape of the peak hours (midday/afternoon) for most days of the week. Of course, this is just a single week out of the whole year, but these symptoms appear to be prevalent in most weeks of the year as suggested by the monthly error metrics displayed later (Figure&nbsp;7 and Figure&nbsp;8).</p>
<p>Below is a snapshot of early July 2024 forecasts:</p>
<div id="fig-jul" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-jul-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://rnd195.github.io/posts/tfm-electricity-consumption/index.assets/image-20250118145842099.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-jul-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;5: Forecasts vs actual values (first week of Jul 2024)
</figcaption>
</figure>
</div>
<p>This is a totally different story as it seems that the model was capable of generating relatively accurate forecasts. This can likely be attributed to the less volatile pattern of electricity consumption in the summer months of 2024 which is certainly helpful for univariate models.</p>
<p>Finally, let’s take a look at a sample from October 2024:</p>
<div id="fig-oct" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-oct-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://rnd195.github.io/posts/tfm-electricity-consumption/index.assets/image-20250118145847345.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-oct-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;6: Forecasts vs actual values (first week of Oct 2024)
</figcaption>
</figure>
</div>
<p>In this case, we get similar issues with the shape and sometimes even the level as in the first displayed plot. Interestingly, perhaps due to the autoregressive nature of the model, it was able to capture the distinct “U” shape of the peak consumption.</p>
</section>
<section id="error-metrics" class="level3">
<h3 class="anchored" data-anchor-id="error-metrics">Error metrics</h3>
<p>Using the forecasting scheme outlined above, the 200M TimesFM model with default parameters was capable of recording the following accuracy metrics on the 2024 Finnish electricity consumption data</p>
<table class="caption-top table">
<colgroup>
<col style="width: 33%">
<col style="width: 11%">
<col style="width: 54%">
</colgroup>
<thead>
<tr class="header">
<th>Metric (total)</th>
<th>Value</th>
<th>Explainer</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Mean absolute percentage error (MAPE)</td>
<td>2.659%</td>
<td>On average, how much does a single point forecast deviate from actual values in absolute terms. Denoted in %</td>
</tr>
<tr class="even">
<td>Root mean square error (RMSE)</td>
<td>356.89071 MWh</td>
<td>On average, how much does a single point forecast deviate from actual values in squared terms. Larger mistakes are penalized more. Denoted in MWh</td>
</tr>
<tr class="odd">
<td>R-squared</td>
<td>95.817%</td>
<td>This can help determine shape accuracy, but not level</td>
</tr>
<tr class="even">
<td>Mean bias error</td>
<td>18.25352 MWh</td>
<td>Overestimation (+) or underestimation (-), on average</td>
</tr>
</tbody>
</table>
<p>Let’s also take a look at MAPE and RMSE grouped by month to get a better picture of which months were easier to forecast with the model.</p>
<div class="quarto-layout-panel" data-layout-ncol="2">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div id="fig-mape" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-mape-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://rnd195.github.io/posts/tfm-electricity-consumption/index.assets/image-20250118145948726.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-mape-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;7: Monthly MAPE
</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div id="fig-rmse" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-rmse-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://rnd195.github.io/posts/tfm-electricity-consumption/index.assets/image-20250118145954658.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-rmse-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;8: Monthly RMSE
</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>It is clear that the 200M TimesFM model was the most accurate in July and August which can partly be seen in Figure&nbsp;5 as discussed earlier. In terms of RMSE, the least accurate forecasts were generated in the first month of 2024.</p>
</section>
</section>
<section id="thoughts" class="level2">
<h2 class="anchored" data-anchor-id="thoughts">Thoughts</h2>
<p>While I cannot confidently comment on the relative levels of these error metrics with respect to Finnish data due to a lack of experience with Finnish electricity consumption, <strong>I find these results impressive</strong> for a univariate model that doesn’t need to be trained. It is without a doubt that multivariate models would outperform this framework in this particular forecasting exercise. Still, I think it is valuable to benchmark the model on data that is known to be <em>forecastable</em> as it may help us understand what we can expect from the framework in other domains.</p>
<p>Regardless, I am now very interested in future foundation time-series models that Google Research may release. Perhaps this is a sign of what’s to come in the time-series forecasting domain? I hope so. On that note, the TimesFM <a href="https://github.com/google-research/timesfm">repository on GitHub</a> has recently been updated with a 500M variant. Would this model generate more accurate forecasts in the exercise outlined in this post? It’s possible but that is a question for another time.</p>
<p><br> <a href="https://github.com/rnd195/rnd195.github.io-comments/issues/1" class="btn btn-secondary bi-chat" title="Comment on GitHub" target="_blank">Comment on GitHub</a> <a href="https://github.com/rnd195/tfm-electricity-consumption" class="btn btn-secondary bi-code-slash" title="Notebook with code" target="_blank">Notebook with code</a></p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Google Research (2024). A decoder-only foundation model for time-series forecasting. <a href="https://research.google/blog/a-decoder-only-foundation-model-for-time-series-forecasting/" class="uri">https://research.google/blog/a-decoder-only-foundation-model-for-time-series-forecasting/</a>↩︎</p></li>
<li id="fn2"><p>See, for example <a href="https://www.ibm.com/think/topics/foundation-models" class="uri">https://www.ibm.com/think/topics/foundation-models</a>↩︎</p></li>
<li id="fn3"><p>For instance <a href="https://github.com/qianlima-lab/time-series-ptms?tab=readme-ov-file#pre-trained-models-on-time-series-forecasting" class="uri">https://github.com/qianlima-lab/time-series-ptms?tab=readme-ov-file#pre-trained-models-on-time-series-forecasting</a>↩︎</p></li>
<li id="fn4"><p>Das, A., Kong, W., Sen, R., &amp; Zhou, Y. (2023). A decoder-only foundation model for time-series forecasting. <em>arXiv preprint arXiv:2310.10688</em>. <a href="https://arxiv.org/abs/2310.10688" class="uri">https://arxiv.org/abs/2310.10688</a>↩︎</p></li>
<li id="fn5"><p><a href="https://data.fingrid.fi/en/datasets/124">“Electricity consumption in Finland”</a> provided by <a href="https://data.fingrid.fi/en">Fingrid</a> is licensed under <a href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a>↩︎</p></li>
<li id="fn6"><p>Hanck, C., Arnold, M., Gerber, A., &amp; Schmelzer, M. (2024). Introduction to Econometrics with R. <a href="https://www.econometrics-with-r.org/14.8-niib.html#pseudo-out-of-sample-forecasting" class="uri">https://www.econometrics-with-r.org/14.8-niib.html#pseudo-out-of-sample-forecasting</a>↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div>Content of this blogpost is licensed under Creative Commons Attribution CC BY 4.0. Any content used from other sources is indicated and is  not covered by this license.
<a rel="license" href="https://creativecommons.org/licenses/by/4.0/">(View License)</a></div></div></section></div> ]]></description>
  <category>analysis</category>
  <category>python</category>
  <guid>https://rnd195.github.io/posts/tfm-electricity-consumption/</guid>
  <pubDate>Sat, 25 Jan 2025 23:00:00 GMT</pubDate>
  <media:content url="https://rnd195.github.io/posts/tfm-electricity-consumption/thumbnail.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
